#ifndef COMMON_H
#define COMMON_H

/* config parameters */
static const char *PORT = "1153";
static const size_t BUF_SIZE = 2048;
static const int MAX_HOST = 10;
static const int TRY_LIMIT = 10;
static const int MIN_TIME_OUT = 500;

/* structs for messages */
typedef struct {
  uint32_t type; // must be equal to 1
  uint32_t sender; // the senderâ€™s id
  uint32_t msg_id; // the identifier of the message generated by the sender
  uint32_t data; // a dummy integer
} DataMessage;

typedef struct {
  uint32_t type; // must be equal to 2
  uint32_t sender; // the sender of the DataMessage
  uint32_t msg_id; // the identifier of the DataMessage generated by the sender
  uint32_t proposed_seq; // the proposed sequence number
  uint32_t proposer;    // the process id of the proposer
} AckMessage;

typedef struct {
  uint32_t type; // must be equal to 3
  uint32_t sender; // the sender of the DataMessage
  uint32_t msg_id; // the identifier of the DataMessage generated by the sender
  uint32_t final_seq; // the final sequence number selected by the sender
  uint32_t final_seq_proposer; // the process id of the proposer who proposed the final_seq
} SeqMessage;

typedef struct {
  uint32_t type; // must be equal to 4
  uint32_t receiver; // the receiver's id
} UpMessage;

typedef struct {
  uint32_t type; // must be equal to 5
  uint32_t sender; // the sender of the DataMessage
  uint32_t msg_id; // the identifier of the DataMessage generated by the sender
  uint32_t receiver; // the receiver of the SeqMessage
} AckSeqMessage;

/* type constants of messages */
#define DATA_MSG_TYPE 1
#define ACK_MSG_TYPE 2
#define SEQ_MSG_TYPE 3
#define UP_MSG_TYPE 4
#define ACK_SEQ_MSG_TYPE 5

/* size for each type of messages */
#define DATA_MSG_SIZE 4
#define ACK_MSG_SIZE 5
#define SEQ_MSG_SIZE 5
#define UP_MSG_SIZE 2
#define ACK_SEQ_MSG_SIZE 4

#define ID_UNKNOWN (-1)

#endif
